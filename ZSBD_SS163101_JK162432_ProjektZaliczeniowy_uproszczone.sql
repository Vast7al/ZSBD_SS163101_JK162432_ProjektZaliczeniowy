--Players_Archive

CREATE TABLE PLAYERS_ARCHIVE (
    ID_PLAYER NUMBER,
    NICK_NAME VARCHAR2(50),
    FIRST_NAME VARCHAR2(50),
    SECOND_NAME VARCHAR2(50),
    AGE NUMBER,
    COUNTRY VARCHAR2(50),
    TEAM_NAME VARCHAR2(50),
    POSITION_IN_GAME VARCHAR2(50),
    DELETED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);

--Players

CREATE TABLE PLAYERS (
    ID_PLAYER NUMBER GENERATED BY DEFAULT AS IDENTITY,
    NICK_NAME VARCHAR2(50),
    FIRST_NAME VARCHAR2(100),
    SECOND_NAME VARCHAR2(100),
    AGE NUMBER,
    COUNTRY VARCHAR2(100),
    TEAM_NAME VARCHAR2(100),
    POSITION_IN_GAME VARCHAR2(50)
);

--PLAYERS_LOG

CREATE TABLE PLAYERS_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ACTION_TYPE VARCHAR2(10),
    LOG_TIME TIMESTAMP,
    USER_NAME VARCHAR2(100),
    ID_PLAYER NUMBER,
    NICK_NAME VARCHAR2(50),
    FIRST_NAME VARCHAR2(100),
    SECOND_NAME VARCHAR2(100),
    AGE NUMBER,
    COUNTRY VARCHAR2(100),
    TEAM_NAME VARCHAR2(100),
    POSITION_IN_GAME VARCHAR2(50)
);

--PLAYERS_STATISTICS

CREATE TABLE PLAYERS_STATISTICS (
    ID_PLAYER_STATS NUMBER GENERATED BY DEFAULT AS IDENTITY,
    PLAYER_ID NUMBER,
    KILLS NUMBER DEFAULT 0,
    ASSIST NUMBER DEFAULT 0,
    DEATH NUMBER DEFAULT 1,
    MVP NUMBER DEFAULT 0,
    FIRST_KILL NUMBER DEFAULT 0,
    FIRST_DEATH NUMBER DEFAULT 0,
    KDA NUMBER GENERATED ALWAYS AS ((KILLS + ASSIST * 0.5) / DEATH) VIRTUAL
);

--STATISTICS

CREATE TABLE STATISTICS (
    ID_STATS NUMBER GENERATED BY DEFAULT AS IDENTITY,
    TEAM VARCHAR2(100),
    WIN_ROUND NUMBER DEFAULT 0,
    LOST_ROUND NUMBER DEFAULT 0,
    MAP VARCHAR2(100)
);

--TEAMS

CREATE TABLE TEAMS (
    ID_TEAM NUMBER GENERATED BY DEFAULT AS IDENTITY,
    TEAM_NAME VARCHAR2(100),
    COUNTRY VARCHAR2(100),
    VRS_POINTS NUMBER,
    POSITION_BY_VRS NUMBER,
    TOURNAMENTS_PLAYS NUMBER
);

--UQ_NICK_NAME

CREATE UNIQUE INDEX UQ_NICK_NAME ON PLAYERS (NICK_NAME);

--TRG_LOG_PLAYERS

CREATE OR REPLACE TRIGGER TRG_LOG_PLAYERS
AFTER INSERT OR UPDATE OR DELETE ON players
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO players_log (
      action_type, log_time, user_name,
      id_player, nick_name, first_name, second_name,
      age, country, team_name, position_in_game
    ) VALUES (
      'INSERT', SYSTIMESTAMP, USER,
      :NEW.id_player, :NEW.nick_name, :NEW.first_name, :NEW.second_name,
      :NEW.age, :NEW.country, :NEW.team_name, :NEW.position_in_game
    );

  ELSIF UPDATING THEN
    INSERT INTO players_log (
      action_type, log_time, user_name,
      id_player, nick_name, first_name, second_name,
      age, country, team_name, position_in_game
    ) VALUES (
      'UPDATE', SYSTIMESTAMP, USER,
      :NEW.id_player, :NEW.nick_name, :NEW.first_name, :NEW.second_name,
      :NEW.age, :NEW.country, :NEW.team_name, :NEW.position_in_game
    );

  ELSIF DELETING THEN
    INSERT INTO players_log (
      action_type, log_time, user_name,
      id_player, nick_name, first_name, second_name,
      age, country, team_name, position_in_game
    ) VALUES (
      'DELETE', SYSTIMESTAMP, USER,
      :OLD.id_player, :OLD.nick_name, :OLD.first_name, :OLD.second_name,
      :OLD.age, :OLD.country, :OLD.team_name, :OLD.position_in_game
    );
  END IF;
END;


--TRG_PLAYER_ID

CREATE OR REPLACE TRIGGER TRG_PLAYER_ID
BEFORE INSERT ON players
FOR EACH ROW
BEGIN
  IF :NEW.id_player IS NULL THEN
    SELECT player_seq.NEXTVAL INTO :NEW.id_player FROM dual;
  END IF;
END;
/

ALTER TRIGGER TRG_PLAYER_ID ENABLE;


--AKTUALIZUJ_ZAWODNIKA

CREATE OR REPLACE PROCEDURE aktualizuj_zawodnika(
    p_id_player IN NUMBER,
    p_nick_name IN VARCHAR2,
    p_first_name IN VARCHAR2,
    p_second_name IN VARCHAR2,
    p_age IN NUMBER,
    p_country IN VARCHAR2,
    p_team_name IN VARCHAR2,
    p_position_in_game IN VARCHAR2
)
AS
BEGIN
    UPDATE players
    SET
        nick_name = p_nick_name,
        first_name = p_first_name,
        second_name = p_second_name,
        age = p_age,
        country = p_country,
        team_name = p_team_name,
        position_in_game = p_position_in_game
    WHERE id_player = p_id_player;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Nie znaleziono zawodnika o podanym ID.');
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/
--DODAJ_DRUZYNE

SET DEFINE OFF;

CREATE OR REPLACE PROCEDURE DODAJ_DRUZYNE (
    p_id_team            IN NUMBER,
    p_team_name          IN VARCHAR2,
    p_country            IN VARCHAR2,
    p_vrs_points         IN NUMBER,
    p_position_by_vrs    IN NUMBER,
    p_tournaments_plays  IN NUMBER
)
AS
BEGIN
    INSERT INTO teams (
        id_team, team_name, country, vrs_points, position_by_vrs, tournaments_plays
    ) VALUES (
        p_id_team, p_team_name, p_country, p_vrs_points, p_position_by_vrs, p_tournaments_plays
    );

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Drużyna z ID ' || p_id_team || ' lub nazwą ' || p_team_name || ' już istnieje.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Inny błąd: ' || SQLERRM);
END;
/

--NAJLEPSI_NA_KAZDEJ_POZYCJI

SET DEFINE OFF;

CREATE OR REPLACE PROCEDURE NAJLEPSI_NA_KAZDEJ_POZYCJI (
    p_result OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_result FOR
    SELECT
        position_in_game,
        nick_name,
        kda
    FROM (
        SELECT
            p.position_in_game,
            p.nick_name,
            ps.kda,
            RANK() OVER (PARTITION BY p.position_in_game ORDER BY ps.kda DESC) AS rnk
        FROM
            players p
            JOIN players_statistics ps ON p.id_player = ps.player_id
    )
    WHERE rnk = 1
    ORDER BY position_in_game;
END;
/


--USUN_ZAWODNIKA

CREATE OR REPLACE PROCEDURE usun_zawodnika(p_id_player IN NUMBER)
AS
BEGIN
    INSERT INTO players_archive (id_player, nick_name, first_name, second_name, age, country, team_name, position_in_game, deleted_at)
    SELECT id_player, nick_name, first_name, second_name, age, country, team_name, position_in_game, SYSTIMESTAMP
    FROM players
    WHERE id_player = p_id_player;
    DELETE FROM players WHERE id_player = p_id_player;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie znaleziono zawodnika o podanym ID.');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

--SPRAWDZ_WIEK_PLAYERA

CREATE OR REPLACE FUNCTION SPRAWDZ_WIEK_PLAYERA (p_id_player IN NUMBER)
RETURN NUMBER
IS
    v_age players.age%TYPE;
BEGIN
    SELECT age INTO v_age FROM players WHERE id_player = p_id_player;

    IF v_age BETWEEN 15 AND 45 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN TOO_MANY_ROWS THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN 0;
END;
/

--SREDNIE_STATYSTYKI_ZAWODNIKA

CREATE OR REPLACE FUNCTION SREDNIE_STATYSTYKI_ZAWODNIKA (p_id_player IN NUMBER)
RETURN SYS_REFCURSOR
AS
    rc SYS_REFCURSOR;
BEGIN
    OPEN rc FOR
        SELECT
            NVL(AVG(kills), 0)   AS avg_kills,
            NVL(AVG(assist), 0)  AS avg_assist,
            NVL(AVG(death), 0)   AS avg_death,
            NVL(AVG(kda), 0)     AS avg_kda
        FROM players_statistics
        WHERE player_id = p_id_player;

    RETURN rc;
END;
/

--Constrains Teams

ALTER TABLE TEAMS MODIFY (ID_TEAM NOT NULL);
ALTER TABLE TEAMS MODIFY (TEAM_NAME NOT NULL);

ALTER TABLE TEAMS ADD CONSTRAINT PK_TEAMS PRIMARY KEY (ID_TEAM);

--Constrains Statisctics

ALTER TABLE STATISTICS MODIFY (ID_STATS NOT NULL);
ALTER TABLE STATISTICS MODIFY (MAP NOT NULL);

ALTER TABLE STATISTICS ADD CONSTRAINT CHK_WIN_ROUND CHECK (win_round >= 0);
ALTER TABLE STATISTICS ADD CONSTRAINT CHK_LOST_ROUND CHECK (lost_round >= 0);

ALTER TABLE STATISTICS ADD CONSTRAINT PK_STATISTICS PRIMARY KEY (ID_STATS);

--Constrains TOURNAMENT

ALTER TABLE TOURNAMENT MODIFY (ID_TOURNAMENT NOT NULL);
ALTER TABLE TOURNAMENT MODIFY (NAME_TOURNAMENT NOT NULL);
ALTER TABLE TOURNAMENT MODIFY (COUNTRY NOT NULL);
ALTER TABLE TOURNAMENT MODIFY (DATA_TOURNAMENT NOT NULL);

ALTER TABLE TOURNAMENT ADD CONSTRAINT PK_TOURNAMENT PRIMARY KEY (ID_TOURNAMENT);

--Constrains PLAYERS

ALTER TABLE PLAYERS MODIFY (ID_PLAYER NOT NULL);
ALTER TABLE PLAYERS MODIFY (NICK_NAME NOT NULL);

ALTER TABLE PLAYERS ADD CONSTRAINT CHK_PLAYER_AGE CHECK (age >= 0);

ALTER TABLE PLAYERS ADD CONSTRAINT PK_PLAYERS PRIMARY KEY (ID_PLAYER);
ALTER TABLE PLAYERS ADD CONSTRAINT UQ_NICK_NAME UNIQUE (NICK_NAME);

--Constrains PLAYERS_STATISTICS

ALTER TABLE PLAYERS_STATISTICS MODIFY (ID_PLAYER_STATS NOT NULL);

ALTER TABLE PLAYERS_STATISTICS ADD CONSTRAINT CHK_DEATH_POSITIVE CHECK (death > 0);

ALTER TABLE PLAYERS_STATISTICS ADD CONSTRAINT PK_PLAYER_STATS PRIMARY KEY (ID_PLAYER_STATS);


----Constrains PLAYERS_LOG

ALTER TABLE PLAYERS_LOG MODIFY (LOG_ID NOT NULL);

ALTER TABLE PLAYERS_LOG ADD CONSTRAINT PK_PLAYERS_LOG PRIMARY KEY (LOG_ID);

--FOREIGN KEY

ALTER TABLE PLAYERS_STATISTICS
ADD CONSTRAINT FK_PLAYER_STATS_TO_PLAYER
FOREIGN KEY (PLAYER_ID)
REFERENCES PLAYERS(ID_PLAYER)
ON DELETE CASCADE;
